{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events');\nconst packageData = require('../../package.json');\nconst shared = require('../shared');\nconst LeWindows = require('../mime-node/le-windows');\nconst MimeNode = require('../mime-node');\n\n/**\n * Generates a Transport object for AWS SES\n *\n * @constructor\n * @param {Object} optional config parameter\n */\nclass SESTransport extends EventEmitter {\n  constructor(options) {\n    super();\n    options = options || {};\n    this.options = options || {};\n    this.ses = this.options.SES;\n    this.name = 'SESTransport';\n    this.version = packageData.version;\n    this.logger = shared.getLogger(this.options, {\n      component: this.options.component || 'ses-transport'\n    });\n  }\n  getRegion(cb) {\n    if (this.ses.sesClient.config && typeof this.ses.sesClient.config.region === 'function') {\n      // promise\n      return this.ses.sesClient.config.region().then(region => cb(null, region)).catch(err => cb(err));\n    }\n    return cb(null, false);\n  }\n\n  /**\n   * Compiles a mailcomposer message and forwards it to SES\n   *\n   * @param {Object} emailMessage MailComposer object\n   * @param {Function} callback Callback function to run when the sending is completed\n   */\n  send(mail, callback) {\n    let statObject = {\n      ts: Date.now(),\n      pending: true\n    };\n    let fromHeader = mail.message._headers.find(header => /^from$/i.test(header.key));\n    if (fromHeader) {\n      let mimeNode = new MimeNode('text/plain');\n      fromHeader = mimeNode._convertAddresses(mimeNode._parseAddresses(fromHeader.value));\n    }\n    let envelope = mail.data.envelope || mail.message.getEnvelope();\n    let messageId = mail.message.messageId();\n    let recipients = [].concat(envelope.to || []);\n    if (recipients.length > 3) {\n      recipients.push('...and ' + recipients.splice(2).length + ' more');\n    }\n    this.logger.info({\n      tnx: 'send',\n      messageId\n    }, 'Sending message %s to <%s>', messageId, recipients.join(', '));\n    let getRawMessage = next => {\n      // do not use Message-ID and Date in DKIM signature\n      if (!mail.data._dkim) {\n        mail.data._dkim = {};\n      }\n      if (mail.data._dkim.skipFields && typeof mail.data._dkim.skipFields === 'string') {\n        mail.data._dkim.skipFields += ':date:message-id';\n      } else {\n        mail.data._dkim.skipFields = 'date:message-id';\n      }\n      let sourceStream = mail.message.createReadStream();\n      let stream = sourceStream.pipe(new LeWindows());\n      let chunks = [];\n      let chunklen = 0;\n      stream.on('readable', () => {\n        let chunk;\n        while ((chunk = stream.read()) !== null) {\n          chunks.push(chunk);\n          chunklen += chunk.length;\n        }\n      });\n      sourceStream.once('error', err => stream.emit('error', err));\n      stream.once('error', err => {\n        next(err);\n      });\n      stream.once('end', () => next(null, Buffer.concat(chunks, chunklen)));\n    };\n    setImmediate(() => getRawMessage((err, raw) => {\n      if (err) {\n        this.logger.error({\n          err,\n          tnx: 'send',\n          messageId\n        }, 'Failed creating message for %s. %s', messageId, err.message);\n        statObject.pending = false;\n        return callback(err);\n      }\n      let sesMessage = {\n        Content: {\n          Raw: {\n            // required\n            Data: raw // required\n          }\n        },\n        FromEmailAddress: fromHeader ? fromHeader : envelope.from,\n        Destination: {\n          ToAddresses: envelope.to\n        }\n      };\n      Object.keys(mail.data.ses || {}).forEach(key => {\n        sesMessage[key] = mail.data.ses[key];\n      });\n      this.getRegion((err, region) => {\n        if (err || !region) {\n          region = 'us-east-1';\n        }\n        const command = new this.ses.SendEmailCommand(sesMessage);\n        const sendPromise = this.ses.sesClient.send(command);\n        sendPromise.then(data => {\n          if (region === 'us-east-1') {\n            region = 'email';\n          }\n          statObject.pending = true;\n          callback(null, {\n            envelope: {\n              from: envelope.from,\n              to: envelope.to\n            },\n            messageId: '<' + data.MessageId + (!/@/.test(data.MessageId) ? '@' + region + '.amazonses.com' : '') + '>',\n            response: data.MessageId,\n            raw\n          });\n        }).catch(err => {\n          this.logger.error({\n            err,\n            tnx: 'send'\n          }, 'Send error for %s: %s', messageId, err.message);\n          statObject.pending = false;\n          callback(err);\n        });\n      });\n    }));\n  }\n\n  /**\n   * Verifies SES configuration\n   *\n   * @param {Function} callback Callback function\n   */\n  verify(callback) {\n    let promise;\n    if (!callback) {\n      promise = new Promise((resolve, reject) => {\n        callback = shared.callbackPromise(resolve, reject);\n      });\n    }\n    const cb = err => {\n      if (err && !['InvalidParameterValue', 'MessageRejected'].includes(err.code || err.Code || err.name)) {\n        return callback(err);\n      }\n      return callback(null, true);\n    };\n    const sesMessage = {\n      Content: {\n        Raw: {\n          Data: Buffer.from('From: <invalid@invalid>\\r\\nTo: <invalid@invalid>\\r\\n Subject: Invalid\\r\\n\\r\\nInvalid')\n        }\n      },\n      FromEmailAddress: 'invalid@invalid',\n      Destination: {\n        ToAddresses: ['invalid@invalid']\n      }\n    };\n    this.getRegion((err, region) => {\n      if (err || !region) {\n        region = 'us-east-1';\n      }\n      const command = new this.ses.SendEmailCommand(sesMessage);\n      const sendPromise = this.ses.sesClient.send(command);\n      sendPromise.then(data => cb(null, data)).catch(err => cb(err));\n    });\n    return promise;\n  }\n}\nmodule.exports = SESTransport;","map":{"version":3,"names":["EventEmitter","require","packageData","shared","LeWindows","MimeNode","SESTransport","constructor","options","ses","SES","name","version","logger","getLogger","component","getRegion","cb","sesClient","config","region","then","catch","err","send","mail","callback","statObject","ts","Date","now","pending","fromHeader","message","_headers","find","header","test","key","mimeNode","_convertAddresses","_parseAddresses","value","envelope","data","getEnvelope","messageId","recipients","concat","to","length","push","splice","info","tnx","join","getRawMessage","next","_dkim","skipFields","sourceStream","createReadStream","stream","pipe","chunks","chunklen","on","chunk","read","once","emit","Buffer","setImmediate","raw","error","sesMessage","Content","Raw","Data","FromEmailAddress","from","Destination","ToAddresses","Object","keys","forEach","command","SendEmailCommand","sendPromise","MessageId","response","verify","promise","Promise","resolve","reject","callbackPromise","includes","code","Code","module","exports"],"sources":["C:/Users/laksh/OneDrive/Documents/Research_paper_management_system/node_modules/nodemailer/lib/ses-transport/index.js"],"sourcesContent":["'use strict';\n\nconst EventEmitter = require('events');\nconst packageData = require('../../package.json');\nconst shared = require('../shared');\nconst LeWindows = require('../mime-node/le-windows');\nconst MimeNode = require('../mime-node');\n\n/**\n * Generates a Transport object for AWS SES\n *\n * @constructor\n * @param {Object} optional config parameter\n */\nclass SESTransport extends EventEmitter {\n    constructor(options) {\n        super();\n        options = options || {};\n\n        this.options = options || {};\n        this.ses = this.options.SES;\n\n        this.name = 'SESTransport';\n        this.version = packageData.version;\n\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || 'ses-transport'\n        });\n    }\n\n    getRegion(cb) {\n        if (this.ses.sesClient.config && typeof this.ses.sesClient.config.region === 'function') {\n            // promise\n            return this.ses.sesClient.config\n                .region()\n                .then(region => cb(null, region))\n                .catch(err => cb(err));\n        }\n        return cb(null, false);\n    }\n\n    /**\n     * Compiles a mailcomposer message and forwards it to SES\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */\n    send(mail, callback) {\n        let statObject = {\n            ts: Date.now(),\n            pending: true\n        };\n\n        let fromHeader = mail.message._headers.find(header => /^from$/i.test(header.key));\n        if (fromHeader) {\n            let mimeNode = new MimeNode('text/plain');\n            fromHeader = mimeNode._convertAddresses(mimeNode._parseAddresses(fromHeader.value));\n        }\n\n        let envelope = mail.data.envelope || mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push('...and ' + recipients.splice(2).length + ' more');\n        }\n        this.logger.info(\n            {\n                tnx: 'send',\n                messageId\n            },\n            'Sending message %s to <%s>',\n            messageId,\n            recipients.join(', ')\n        );\n\n        let getRawMessage = next => {\n            // do not use Message-ID and Date in DKIM signature\n            if (!mail.data._dkim) {\n                mail.data._dkim = {};\n            }\n            if (mail.data._dkim.skipFields && typeof mail.data._dkim.skipFields === 'string') {\n                mail.data._dkim.skipFields += ':date:message-id';\n            } else {\n                mail.data._dkim.skipFields = 'date:message-id';\n            }\n\n            let sourceStream = mail.message.createReadStream();\n            let stream = sourceStream.pipe(new LeWindows());\n            let chunks = [];\n            let chunklen = 0;\n\n            stream.on('readable', () => {\n                let chunk;\n                while ((chunk = stream.read()) !== null) {\n                    chunks.push(chunk);\n                    chunklen += chunk.length;\n                }\n            });\n\n            sourceStream.once('error', err => stream.emit('error', err));\n\n            stream.once('error', err => {\n                next(err);\n            });\n\n            stream.once('end', () => next(null, Buffer.concat(chunks, chunklen)));\n        };\n\n        setImmediate(() =>\n            getRawMessage((err, raw) => {\n                if (err) {\n                    this.logger.error(\n                        {\n                            err,\n                            tnx: 'send',\n                            messageId\n                        },\n                        'Failed creating message for %s. %s',\n                        messageId,\n                        err.message\n                    );\n                    statObject.pending = false;\n                    return callback(err);\n                }\n\n                let sesMessage = {\n                    Content: {\n                        Raw: {\n                            // required\n                            Data: raw // required\n                        }\n                    },\n                    FromEmailAddress: fromHeader ? fromHeader : envelope.from,\n                    Destination: {\n                        ToAddresses: envelope.to\n                    }\n                };\n\n                Object.keys(mail.data.ses || {}).forEach(key => {\n                    sesMessage[key] = mail.data.ses[key];\n                });\n\n                this.getRegion((err, region) => {\n                    if (err || !region) {\n                        region = 'us-east-1';\n                    }\n\n                    const command = new this.ses.SendEmailCommand(sesMessage);\n                    const sendPromise = this.ses.sesClient.send(command);\n\n                    sendPromise\n                        .then(data => {\n                            if (region === 'us-east-1') {\n                                region = 'email';\n                            }\n\n                            statObject.pending = true;\n                            callback(null, {\n                                envelope: {\n                                    from: envelope.from,\n                                    to: envelope.to\n                                },\n                                messageId: '<' + data.MessageId + (!/@/.test(data.MessageId) ? '@' + region + '.amazonses.com' : '') + '>',\n                                response: data.MessageId,\n                                raw\n                            });\n                        })\n                        .catch(err => {\n                            this.logger.error(\n                                {\n                                    err,\n                                    tnx: 'send'\n                                },\n                                'Send error for %s: %s',\n                                messageId,\n                                err.message\n                            );\n                            statObject.pending = false;\n                            callback(err);\n                        });\n                });\n            })\n        );\n    }\n\n    /**\n     * Verifies SES configuration\n     *\n     * @param {Function} callback Callback function\n     */\n    verify(callback) {\n        let promise;\n        if (!callback) {\n            promise = new Promise((resolve, reject) => {\n                callback = shared.callbackPromise(resolve, reject);\n            });\n        }\n\n        const cb = err => {\n            if (err && !['InvalidParameterValue', 'MessageRejected'].includes(err.code || err.Code || err.name)) {\n                return callback(err);\n            }\n            return callback(null, true);\n        };\n\n        const sesMessage = {\n            Content: {\n                Raw: {\n                    Data: Buffer.from('From: <invalid@invalid>\\r\\nTo: <invalid@invalid>\\r\\n Subject: Invalid\\r\\n\\r\\nInvalid')\n                }\n            },\n            FromEmailAddress: 'invalid@invalid',\n            Destination: {\n                ToAddresses: ['invalid@invalid']\n            }\n        };\n\n        this.getRegion((err, region) => {\n            if (err || !region) {\n                region = 'us-east-1';\n            }\n\n            const command = new this.ses.SendEmailCommand(sesMessage);\n            const sendPromise = this.ses.sesClient.send(command);\n\n            sendPromise.then(data => cb(null, data)).catch(err => cb(err));\n        });\n\n        return promise;\n    }\n}\n\nmodule.exports = SESTransport;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}