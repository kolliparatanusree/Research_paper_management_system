{"ast":null,"code":"const express = require('express');\nconst router = express.Router();\nconst HodUidRequest = require('../models/HodUidRequest');\nconst RejectedUid = require('../models/RejectedUid');\nconst Hod = require('../models/Hod');\nconst bcrypt = require('bcryptjs');\nconst nodemailer = require('nodemailer');\nconst Faculty = require('../models/Faculty');\nconst transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: 'tanusreekollipara@gmail.com',\n    // Replace with your email\n    pass: 'wtes romt gffu boib' // Use Gmail App Password\n  }\n});\n\n// HoD Registration\nrouter.post('/register', async (req, res) => {\n  try {\n    const {\n      fullName,\n      email,\n      hodId,\n      phoneNumber,\n      gender,\n      department,\n      password\n    } = req.body;\n    const existingHod = await Hod.findOne({\n      email\n    });\n    if (existingHod) return res.status(400).json({\n      message: 'HoD already exists'\n    });\n    const hashedPassword = await bcrypt.hash(password, 10);\n    const newHod = new Hod({\n      fullName,\n      email,\n      hodId,\n      phoneNumber,\n      gender,\n      department,\n      password: hashedPassword\n    });\n    await newHod.save();\n    res.status(201).json({\n      message: 'HoD registered successfully'\n    });\n  } catch (err) {\n    res.status(500).json({\n      error: err.message\n    });\n  }\n});\n\n// HoD Login\nrouter.post('/login', async (req, res) => {\n  try {\n    const {\n      hodId,\n      password\n    } = req.body;\n    const hod = await Hod.findOne({\n      hodId\n    });\n    if (!hod) return res.status(404).json({\n      message: 'HoD not found'\n    });\n    const isMatch = await bcrypt.compare(password, hod.password);\n    if (!isMatch) return res.status(400).json({\n      message: 'Invalid credentials'\n    });\n    res.status(200).json({\n      message: 'Login successful',\n      hod\n    });\n  } catch (err) {\n    res.status(500).json({\n      error: err.message\n    });\n  }\n});\n\n// Submit UID Request from Faculty (with duplicate paperTitle check)\nrouter.post('/uid-request', async (req, res) => {\n  try {\n    const {\n      facultyId,\n      paperTitle\n    } = req.body;\n\n    // Check for duplicate paperTitle for the same faculty (case insensitive)\n    const existing = await HodUidRequest.findOne({\n      facultyId,\n      paperTitle: {\n        $regex: new RegExp(`^${paperTitle}$`, 'i')\n      }\n    });\n    if (existing) {\n      return res.status(400).json({\n        message: 'This paper title already exists'\n      });\n    }\n    const newRequest = new HodUidRequest(req.body);\n    await newRequest.save();\n    res.status(201).json({\n      message: 'UID request submitted successfully'\n    });\n  } catch (err) {\n    console.error('Error creating UID request:', err);\n    res.status(500).json({\n      message: 'Failed to submit UID request'\n    });\n  }\n});\n\n// Get all UID requests (sorted newest first)\nrouter.get('/uid-requests', async (req, res) => {\n  try {\n    const requests = await HodUidRequest.find().sort({\n      submittedAt: -1\n    });\n    res.status(200).json(requests);\n  } catch (err) {\n    res.status(500).json({\n      message: 'Failed to fetch UID requests',\n      error: err.message\n    });\n  }\n});\n\n// Get HoD profile by hodId\nrouter.get('/:id', async (req, res) => {\n  try {\n    const hodId = req.params.id;\n    console.log(\"Received HOD ID:\", hodId);\n    const hod = await Hod.findOne({\n      hodId\n    });\n    if (!hod) {\n      return res.status(404).json({\n        message: 'HoD not found'\n      });\n    }\n    res.json(hod);\n  } catch (error) {\n    res.status(500).json({\n      message: 'Server error'\n    });\n  }\n});\n\n// Reject UID Request\nrouter.put('/uid-request/:id/reject', async (req, res) => {\n  try {\n    const {\n      reason\n    } = req.body;\n    const request = await HodUidRequest.findById(req.params.id);\n    if (!request) return res.status(404).json({\n      message: 'Request not found'\n    });\n    const rejectedEntry = new RejectedUid({\n      facultyId: request.facultyId,\n      facultyName: request.facultyName,\n      department: request.department,\n      paperTitle: request.paperTitle,\n      type: request.type,\n      abstract: request.abstract,\n      target: request.target,\n      submittedAt: request.submittedAt,\n      rejectedAt: new Date(),\n      rejectedBy: 'hod',\n      reason\n    });\n    await rejectedEntry.save();\n    await request.deleteOne();\n\n    // Send rejection email to faculty\n    const faculty = await Faculty.findOne({\n      facultyId: request.facultyId\n    });\n    if (faculty && faculty.email) {\n      const mailOptions = {\n        from: 'tanusreekollipara@gmail.com',\n        to: faculty.email,\n        subject: 'UID Request Rejected by HoD',\n        text: `Dear ${request.facultyName},\n\nYour UID request for the paper titled \"${request.paperTitle}\" has been rejected by the HoD.\n\nReason: ${reason}\n\nYou may modify the request and resubmit if necessary.\n\nRegards,\nSVECW HoD`\n      };\n      transporter.sendMail(mailOptions, (error, info) => {\n        if (error) {\n          console.error('Error sending HoD rejection email:', error);\n        } else {\n          console.log('HoD rejection email sent:', info.response);\n        }\n      });\n    }\n    res.status(200).json({\n      message: 'UID request rejected, logged, and email sent'\n    });\n  } catch (err) {\n    console.error('Rejection failed:', err);\n    res.status(500).json({\n      message: 'Server error',\n      error: err.message\n    });\n  }\n});\n\n// Accept UID Request (set hodAccept: true)\nrouter.put('/uid-request/:id/accept', async (req, res) => {\n  try {\n    const updated = await HodUidRequest.findByIdAndUpdate(req.params.id, {\n      $set: {\n        hodAccept: true\n      }\n    }, {\n      new: true\n    } // return updated document\n    );\n    if (!updated) {\n      return res.status(404).json({\n        message: 'Request not found'\n      });\n    }\n    res.json({\n      message: 'UID request accepted',\n      updated\n    });\n  } catch (err) {\n    res.status(500).json({\n      message: 'Failed to accept request'\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","HodUidRequest","RejectedUid","Hod","bcrypt","nodemailer","Faculty","transporter","createTransport","service","auth","user","pass","post","req","res","fullName","email","hodId","phoneNumber","gender","department","password","body","existingHod","findOne","status","json","message","hashedPassword","hash","newHod","save","err","error","hod","isMatch","compare","facultyId","paperTitle","existing","$regex","RegExp","newRequest","console","get","requests","find","sort","submittedAt","params","id","log","put","reason","request","findById","rejectedEntry","facultyName","type","abstract","target","rejectedAt","Date","rejectedBy","deleteOne","faculty","mailOptions","from","to","subject","text","sendMail","info","response","updated","findByIdAndUpdate","$set","hodAccept","new","module","exports"],"sources":["C:/Users/laksh/OneDrive/Documents/Research_paper_management_system/frontend/src/components/HodDashboard.js"],"sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst HodUidRequest = require('../models/HodUidRequest');\r\nconst RejectedUid = require('../models/RejectedUid');\r\nconst Hod = require('../models/Hod');\r\nconst bcrypt = require('bcryptjs');\r\nconst nodemailer = require('nodemailer');\r\nconst Faculty = require('../models/Faculty');\r\n\r\nconst transporter = nodemailer.createTransport({\r\n  service: 'gmail',\r\n  auth: {\r\n    user: 'tanusreekollipara@gmail.com', // Replace with your email\r\n    pass: 'wtes romt gffu boib'          // Use Gmail App Password\r\n  }\r\n});\r\n\r\n// HoD Registration\r\nrouter.post('/register', async (req, res) => {\r\n  try {\r\n    const { fullName, email, hodId, phoneNumber, gender, department, password } = req.body;\r\n\r\n    const existingHod = await Hod.findOne({ email });\r\n    if (existingHod) return res.status(400).json({ message: 'HoD already exists' });\r\n\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n    const newHod = new Hod({\r\n      fullName,\r\n      email,\r\n      hodId,\r\n      phoneNumber,\r\n      gender,\r\n      department,\r\n      password: hashedPassword\r\n    });\r\n\r\n    await newHod.save();\r\n    res.status(201).json({ message: 'HoD registered successfully' });\r\n  } catch (err) {\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n});\r\n\r\n// HoD Login\r\nrouter.post('/login', async (req, res) => {\r\n  try {\r\n    const { hodId, password } = req.body;\r\n    const hod = await Hod.findOne({ hodId });\r\n\r\n    if (!hod) return res.status(404).json({ message: 'HoD not found' });\r\n\r\n    const isMatch = await bcrypt.compare(password, hod.password);\r\n    if (!isMatch) return res.status(400).json({ message: 'Invalid credentials' });\r\n\r\n    res.status(200).json({ message: 'Login successful', hod });\r\n  } catch (err) {\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n});\r\n\r\n// Submit UID Request from Faculty (with duplicate paperTitle check)\r\nrouter.post('/uid-request', async (req, res) => {\r\n  try {\r\n    const { facultyId, paperTitle } = req.body;\r\n\r\n    // Check for duplicate paperTitle for the same faculty (case insensitive)\r\n    const existing = await HodUidRequest.findOne({\r\n      facultyId,\r\n      paperTitle: { $regex: new RegExp(`^${paperTitle}$`, 'i') }\r\n    });\r\n\r\n    if (existing) {\r\n      return res.status(400).json({ message: 'This paper title already exists' });\r\n    }\r\n\r\n    const newRequest = new HodUidRequest(req.body);\r\n    await newRequest.save();\r\n\r\n    res.status(201).json({ message: 'UID request submitted successfully' });\r\n  } catch (err) {\r\n    console.error('Error creating UID request:', err);\r\n    res.status(500).json({ message: 'Failed to submit UID request' });\r\n  }\r\n});\r\n\r\n// Get all UID requests (sorted newest first)\r\nrouter.get('/uid-requests', async (req, res) => {\r\n  try {\r\n    const requests = await HodUidRequest.find().sort({ submittedAt: -1 });\r\n    res.status(200).json(requests);\r\n  } catch (err) {\r\n    res.status(500).json({ message: 'Failed to fetch UID requests', error: err.message });\r\n  }\r\n});\r\n\r\n// Get HoD profile by hodId\r\nrouter.get('/:id', async (req, res) => {\r\n  try {\r\n    const hodId = req.params.id;\r\n    console.log(\"Received HOD ID:\", hodId);\r\n\r\n    const hod = await Hod.findOne({ hodId });\r\n    if (!hod) {\r\n      return res.status(404).json({ message: 'HoD not found' });\r\n    }\r\n\r\n    res.json(hod);\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Server error' });\r\n  }\r\n});\r\n\r\n// Reject UID Request\r\nrouter.put('/uid-request/:id/reject', async (req, res) => {\r\n  try {\r\n    const { reason } = req.body;\r\n    const request = await HodUidRequest.findById(req.params.id);\r\n    if (!request) return res.status(404).json({ message: 'Request not found' });\r\n\r\n    const rejectedEntry = new RejectedUid({\r\n      facultyId: request.facultyId,\r\n      facultyName: request.facultyName,\r\n      department: request.department,\r\n      paperTitle: request.paperTitle,\r\n      type: request.type,\r\n      abstract: request.abstract,\r\n      target: request.target,\r\n      submittedAt: request.submittedAt,\r\n      rejectedAt: new Date(),\r\n      rejectedBy: 'hod',\r\n      reason,\r\n    });\r\n\r\n    await rejectedEntry.save();\r\n    await request.deleteOne();\r\n\r\n    // Send rejection email to faculty\r\n    const faculty = await Faculty.findOne({ facultyId: request.facultyId });\r\n    if (faculty && faculty.email) {\r\n      const mailOptions = {\r\n        from: 'tanusreekollipara@gmail.com',\r\n        to: faculty.email,\r\n        subject: 'UID Request Rejected by HoD',\r\n        text: `Dear ${request.facultyName},\r\n\r\nYour UID request for the paper titled \"${request.paperTitle}\" has been rejected by the HoD.\r\n\r\nReason: ${reason}\r\n\r\nYou may modify the request and resubmit if necessary.\r\n\r\nRegards,\r\nSVECW HoD`\r\n      };\r\n\r\n      transporter.sendMail(mailOptions, (error, info) => {\r\n        if (error) {\r\n          console.error('Error sending HoD rejection email:', error);\r\n        } else {\r\n          console.log('HoD rejection email sent:', info.response);\r\n        }\r\n      });\r\n    }\r\n\r\n    res.status(200).json({ message: 'UID request rejected, logged, and email sent' });\r\n  } catch (err) {\r\n    console.error('Rejection failed:', err);\r\n    res.status(500).json({ message: 'Server error', error: err.message });\r\n  }\r\n});\r\n\r\n// Accept UID Request (set hodAccept: true)\r\nrouter.put('/uid-request/:id/accept', async (req, res) => {\r\n  try {\r\n    const updated = await HodUidRequest.findByIdAndUpdate(\r\n      req.params.id,\r\n      { $set: { hodAccept: true } },\r\n      { new: true } // return updated document\r\n    );\r\n\r\n    if (!updated) {\r\n      return res.status(404).json({ message: 'Request not found' });\r\n    }\r\n\r\n    res.json({ message: 'UID request accepted', updated });\r\n  } catch (err) {\r\n    res.status(500).json({ message: 'Failed to accept request' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}